一、test
测试的标志	代表意义
1. 关於某个档名的『文件类型』判断，如 test -e filename 表示存在否
-e	该『档名』是否存在？(常用)
-f	该『档名』是否存在且为文件(file)？(常用)
-d	该『档名』是否存在且为目录(directory)？(常用)
-b	该『档名』是否存在且为一个 block device 装置？
-c	该『档名』是否存在且为一个 character device 装置？
-S	该『档名』是否存在且为一个 Socket 文件？
-p	该『档名』是否存在且为一个 FIFO (pipe) 文件？
-L	该『档名』是否存在且为一个连结档？
2. 关於文件的权限侦测，如 test -r filename 表示可读否 (但 root 权限常有例外)
-r	侦测该档名是否存在且具有『可读』的权限？
-w	侦测该档名是否存在且具有『可写』的权限？
-x	侦测该档名是否存在且具有『可运行』的权限？
-u	侦测该档名是否存在且具有『SUID』的属性？
-g	侦测该档名是否存在且具有『SGID』的属性？
-k	侦测该档名是否存在且具有『Sticky bit』的属性？
-s	侦测该档名是否存在且为『非空白文件』？
3. 两个文件之间的比较，如： test file1 -nt file2
-nt	(newer than)判断 file1 是否比 file2 新
-ot	(older than)判断 file1 是否比 file2 旧
-ef	判断 file1 与 file2 是否为同一文件，可用在判断 hard link 的判定上。 主要意义在判定，两个文件是否均指向同一个 inode 哩！
4. 关於两个整数之间的判定，例如 test n1 -eq n2
-eq	两数值相等 (equal)
-ne	两数值不等 (not equal)
-gt	n1 大於 n2 (greater than)
-lt	n1 小於 n2 (less than)
-ge	n1 大於等於 n2 (greater than or equal)
-le	n1 小於等於 n2 (less than or equal)
5. 判定字串的数据
test -z string	判定字串是否为 0 ？若 string 为空字串，则为 true
test -n string	判定字串是否非为 0 ？若 string 为空字串，则为 false。
注： -n 亦可省略
test str1 = str2	判定 str1 是否等於 str2 ，若相等，则回传 true
test str1 != str2	判定 str1 是否不等於 str2 ，若相等，则回传 false
6. 多重条件判定，例如： test -r filename -a -x filename
-a	(and)两状况同时成立！例如 test -r file -a -x file，则 file 同时具有 r 与 x 权限时，才回传 true。
-o	(or)两状况任何一个成立！例如 test -r file -o -x file，则 file 具有 r 或 x 权限时，就可回传 true。
!	反相状态，如 test ! -x file ，当 file 不具有 x 时，回传 true
二、[ ]
除了test 之外，其实，我们还可以利用判断符号『 [ ] 』(就是中括号) 来进行数据的判断. 举例来说，如果我想要知道 $HOME 这个变量是否为空的，可以这样做：[ -z "$HOME" ] ; echo $?
tips:在中括号 [] 内的每个组件都需要有空白键来分隔；
      在中括号内的变量，最好都以双引号括号起来；
      在中括号内的常数，最好都以单或双引号括号起来。
三、if...then...fi
  1、单层、简单条件判断格式
	if [ 条件判断式 ]; then
		当条件判断式成立时，可以进行的命令工作内容；
	fi   <==将 if 反过来写，就成为 fi 啦！结束 if 之意！
  2、多层、复杂条件判断格式
	# 多个条件判断 (if ... elif ... elif ... else) 分多种不同情况运行
	if [ 条件判断式一 ]; then
		当条件判断式一成立时，可以进行的命令工作内容；
	elif [ 条件判断式二 ]; then
		当条件判断式二成立时，可以进行的命令工作内容；
	else
		当条件判断式一与二均不成立时，可以进行的命令工作内容；
	fi
四、case...esac
  格式
	case  $变量名称 in   <==关键字为 case ，还有变量前有钱字号
  	"第一个变量内容")   <==每个变量内容建议用双引号括起来，关键字则为小括号 )
		程序段
		;;            <==每个类别结尾使用两个连续的分号来处理！
  	"第二个变量内容")
		程序段
		;;
 	 *)                  <==最后一个变量内容都会用 * 来代表所有其他值
		不包含第一个变量内容与第二个变量内容的其他程序运行段
		exit 1
		;;
	esac                  <==最终的 case 结尾！『反过来写』思考一下！

